syntax="proto2";
  
package yamcs.protobuf.filetransfer;

option java_package = "org.yamcs.protobuf";
option java_outer_classname = "FileTransferProto";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

import "yamcs/api/annotations.proto";

// This API deals with transmission (upload and download) of file to and from spacecraft.
// The API can be used to interface any implementation of the FileTransferService.
// One such implementation is for the CFDP - CCSDS File Delivery Protocol.
 
service FileTransferApi {

  // List file transfer services
  rpc ListFileTransferServices(ListFileTransferServicesRequest) returns (ListFileTransferServicesResponse) {
    option (yamcs.api.route) = {
      get: "/api/filetransfer/{instance}/services"
    };
  }

  // List transfers
  rpc ListTransfers(ListTransfersRequest) returns (ListTransfersResponse) {
    option (yamcs.api.route) = {
      get: "/api/filetransfer/{instance}/{serviceName}/transfers"
    };
  }
  
  // Get a transfer
  rpc GetTransfer(GetTransferRequest) returns (TransferInfo) {
    option (yamcs.api.route) = {
      get: "/api/filetransfer/{instance}/{serviceName}/transfers/{id}"
    };
  }
  
  // Create a transfer
  rpc CreateTransfer(CreateTransferRequest) returns (TransferInfo) {
    option (yamcs.api.route) = {
      post: "/api/filetransfer/{instance}/{serviceName}/transfers"
      body: "*"
    };
  }
  
  // Pause a transfer
  rpc PauseTransfer(PauseTransferRequest) returns (google.protobuf.Empty) {
    option (yamcs.api.route) = {
      post: "/api/filetransfer/{instance}/{serviceName}/transfers/{id}:pause"
    };
  }

  // Cancel a transfer
  //
  // The ongoing transfer is aborted, partially uploaded/downloaded files
  // are retained.
  rpc CancelTransfer(CancelTransferRequest) returns (google.protobuf.Empty) {
    option (yamcs.api.route) = {
      post: "/api/filetransfer/{instance}/{serviceName}/transfers/{id}:cancel"
    };
  }
  
  // Resume a transfer
  rpc ResumeTransfer(ResumeTransferRequest) returns (google.protobuf.Empty) {
    option (yamcs.api.route) = {
      post: "/api/filetransfer/{instance}/{serviceName}/transfers/{id}:resume"
    };
  }
  
  // Receive transfer updates
  rpc SubscribeTransfers(SubscribeTransfersRequest) returns (stream TransferInfo) {
    option (yamcs.api.websocket) = {
      topic: "file-transfers"
    };
  }

  // Receive remote file lists
  rpc SubscribeRemoteFileList(SubscribeTransfersRequest) returns (stream ListFilesResponse) {
    option (yamcs.api.websocket) = {
      topic: "remote-file-list"
    };
  }

  // Request file list from remote
  rpc FetchFileList(ListFilesRequest) returns (google.protobuf.Empty) {
    option (yamcs.api.route) = {
      post: "/api/filetransfer/{instance}/{serviceName}/files:sync"
      body: "*"
    };
  }

  // Get latest file list
  rpc GetFileList(ListFilesRequest) returns (ListFilesResponse) {
    option (yamcs.api.route) = {
      get: "/api/filetransfer/{instance}/{serviceName}/files"
      field_mask_root: "files"
    };
  }
}

enum TransferDirection {
  UPLOAD = 1;
  DOWNLOAD = 2;
}

enum TransferState {
  RUNNING = 1;
  PAUSED = 2;
  FAILED = 3;
  COMPLETED = 4;
  QUEUED = 5;
  CANCELLING = 6;
}

message TransactionId {
    optional uint32 sequenceNumber = 1;
    optional uint64 initiatorEntity = 2;
}

message ListFileTransferServicesRequest {
  optional string instance = 1;
}

message ListFileTransferServicesResponse {
  repeated FileTransferServiceInfo services = 1;
}

//This message is used to configure the yacms-web
message FileTransferCapabilities {
  //if true, yamcs-web shows a button for initiating an upload
  optional bool upload = 1;

  //if true, yamcs-web shows a button for initiating a download
  optional bool download = 2;

  // DEPRECATED: use a FileTransferOption in FileTransferServiceInfo to get a reliability toggle
  optional bool reliability = 3 [deprecated=true];

  //if true, yamcs-web will show the section with the destination file/folder name (upload only)
  optional bool remotePath = 4;

  // true = service supports remote file list
  optional bool fileList = 5;

  // if true, yamcs-web will show the "Transfer Type" string column
  optional bool hasTransferType = 6;
}


message FileTransferServiceInfo {
  optional string instance = 1;
  optional string name = 2;
 
  repeated EntityInfo localEntities = 3;
  repeated EntityInfo remoteEntities = 4;
  optional FileTransferCapabilities capabilities = 5;
  repeated FileTransferOption transferOptions = 6;
}

message EntityInfo {
  optional string name = 1;
  optional uint64 id = 2;
}

//message sent as reponse to the info and also when starting a new transfer
message TransferInfo {
  //unique identifier assigned by the file transfer service
  optional uint64 id = 1;
  
  //when the transfer has started. Note that this will not be set for QUEUED transfers.
  optional google.protobuf.Timestamp startTime = 2;
  optional TransferState state = 3;

  optional string bucket = 4;
  optional string objectName = 5;

  optional string remotePath = 6;
  optional TransferDirection direction = 7;

  optional uint64 totalSize = 8;
  optional uint64 sizeTransferred = 9;
  
  //reliable = true -> class 2 transfer
  //reliable = false -> class 1 transfer
  optional bool reliable = 10;
  
  //in case the transcation is failed, this provides more information
  optional string failureReason = 11;

  // valid for CFDP: transaction id;
  // for the incoming transfers it is assigned by the remote peer so therefore might not be unique
  optional TransactionId transactionId = 12;
  
  // when the transfer has been created. 
  optional google.protobuf.Timestamp creationTime = 13;

  // depending on the implementation, can mean normal file transfer, directory listing request, file download request, etc.
  optional string transferType = 14;
}

message CreateTransferRequest {
  // Deprecated: use 'options' instead
  message UploadOptions {
    // Deprecated: use 'options' instead (name: overwrite)
    // Set to ``True`` if an already existing destination should be overwritten.
    // Default: ``True``.
    optional bool overwrite = 1 [deprecated=true];

    // Deprecated: use 'options' instead (name: createPath)
    // Set to ``True`` if the destination path should be created if it does not exist.
    // Default: ``True``.
    optional bool createPath = 2 [deprecated=true];

    // Deprecated: use 'options' instead (name: reliable)
    // Set to ``True`` if reliable (class 2) CFDP transfer should be used,
    // otherwise unreliable (class 1). Default: ``False``.
    optional bool reliable = 3 [deprecated=true];

    // Deprecated: use 'options' instead (name: closureRequested)
    // Introduced in Issue 5 of the CFDP standard for non reliable (class 1) transfers
    // Requests the receiver to send a Finished PDU at the end of the transfer
    optional bool closureRequested = 4 [deprecated=true];
  }
  // Deprecated: use 'options' instead
  message DownloadOptions {
    // Deprecated: use 'options' instead (name: overwrite)
    // Set to ``True`` if an already existing destination should be overwritten.
    // Default: ``True``.
    optional bool overwrite = 1 [deprecated=true];

    // Deprecated: use 'options' instead (name: createPath)
    // Set to ``True`` if the destination path should be created if it does not exist.
    // Default: ``True``.
    optional bool createPath = 2 [deprecated=true];

    // Deprecated: use 'options' instead (name: reliable)
    // Set to ``True`` if reliable (class 2) CFDP transfer should be used,
    // otherwise unreliable (class 1). Default: ``False``.
    optional bool reliable = 3 [deprecated=true];

    // Deprecated: use 'options' instead (name: closureRequested)
    // Introduced in Issue 5 of the CFDP standard for non reliable (class 1) transfers
    // Requests the receiver to send a Finished PDU at the end of the transfer
    optional bool closureRequested = 4 [deprecated=true];
  }

  optional string instance = 1;
  //service name
  optional string serviceName = 8;

  // **Required** One of ``UPLOAD`` or ``DOWNLOAD``.
  optional TransferDirection direction = 2;

  // **Required** The bucket containing the local Yamcs object.
  optional string bucket = 3;
  
  // **Required** The object name in Yamcs bucket storage. For UPLOAD transfers,
  // this object must exist and is what Yamcs will transfer to the remote
  // entity. For DOWNLOAD transfers, it refers to the object that
  // Yamcs will write to when downloading from a remote entity.
  optional string objectName = 4;
  
  // **Required** The path at the remote entity. Example: ``a/local/path/some_filename``.
  optional string remotePath = 5;

  // Deprecated: use 'options' instead
  // Configuration options specific to ``DOWNLOAD`` transfers.
  optional DownloadOptions downloadOptions = 6 [deprecated=true];

  // Deprecated: use 'options' instead
  // Configuration options specific to ``UPLOAD`` transfers.
  optional UploadOptions uploadOptions = 7 [deprecated=true];
  
  //used to derive the source entity id
  optional string source = 9;

  //used to derive the destination entity id
  optional string destination = 10;

  // Options for the transfer
  optional google.protobuf.Struct options = 11;
}

message PauseTransferRequest {
  // Yamcs instance name.
  optional string instance = 1;
  //service name
  optional string serviceName = 3;
  // Transfer identifier (assigned by Yamcs)
  optional int64 id = 2;
}

message CancelTransferRequest {
  // Yamcs instance name.
  optional string instance = 1;
  // service name
  optional string serviceName = 3;
  // Transfer identifier (assigned by Yamcs)
  optional int64 id = 2;
}

message ResumeTransferRequest {
  // Yamcs instance name.
  optional string instance = 1;
  // service name
  optional string serviceName = 3;
  // Transfer identifier (assigned by Yamcs)
  optional int64 id = 2;
}

message ListTransfersRequest {
  // Yamcs instance name.
  optional string instance = 1;
  // service name
  optional string serviceName = 2;
}

message GetTransferRequest {
  // Yamcs instance name.
  optional string instance = 1;
  // service name
  optional string serviceName = 3;
  // Transfer identifier (assigned by Yamcs)
  optional int64 id = 2;
}

message ListTransfersResponse {
  repeated TransferInfo transfers = 1;
}

message SubscribeTransfersRequest {
  // Yamcs instance name.
  optional string instance = 1;
  // service name
  optional string serviceName = 2;
}

message ListFilesRequest {
  // Yamcs instance name.
  optional string instance = 1;
  // service name
  optional string serviceName = 2;
  // Entity from which to get the file list
  optional string source = 3;
  // Entity from which to get the file list
  optional string destination = 4;
  // Path of folder to list files from
  optional string remotePath = 5;
  // Options for the transfer
  optional google.protobuf.Struct options = 6;
}

message RemoteFile {
  optional string name = 1;
  optional bool isDirectory = 2;
  optional uint64 size = 3;
  optional google.protobuf.Timestamp modified = 4;
}

message ListFilesResponse {
  repeated RemoteFile files = 1;
  optional string destination = 2;
  optional string remotePath = 3;
  optional google.protobuf.Timestamp listTime = 4;
}

/*
CUSTOMISABLE FILE TRANSFER OPTIONS
*/
message FileTransferOption {
  enum Type {
    // Shown as checkbox in the UI
    BOOLEAN = 0;
    // Shown as a number field or drop-down if values is specified
    DOUBLE = 1;
    // Shown as text field or drop-down if values is specified
    STRING = 2;
  }

  // Identifier
  optional string name = 1;
  // Option type
  optional Type type = 2;
  // Title for the option
  optional string title = 3;
  // Help text shown on hover
  optional string description = 4;
  // Placeholder for fields and label for checkboxes
  optional string associatedText = 5;
  // Default value for the field
  optional string default = 6;
  // Values for potential dropdown menu
  repeated Value values = 7;
  // Whether a custom field is needed when using the drop-down menu
  optional bool allowCustomOption = 8;

  message Value {
    // Real value for the option (used to sent to the server)
    optional string value = 1;
    // Display name for the value
    optional string verboseName = 2;
  }
}
