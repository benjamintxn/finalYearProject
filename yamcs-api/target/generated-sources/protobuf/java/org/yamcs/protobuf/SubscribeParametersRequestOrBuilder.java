// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yamcs/protobuf/processing/processing.proto

package org.yamcs.protobuf;

public interface SubscribeParametersRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:yamcs.protobuf.processing.SubscribeParametersRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Yamcs instance name.
   * </pre>
   *
   * <code>optional string instance = 1;</code>
   * @return Whether the instance field is set.
   */
  boolean hasInstance();
  /**
   * <pre>
   * Yamcs instance name.
   * </pre>
   *
   * <code>optional string instance = 1;</code>
   * @return The instance.
   */
  java.lang.String getInstance();
  /**
   * <pre>
   * Yamcs instance name.
   * </pre>
   *
   * <code>optional string instance = 1;</code>
   * @return The bytes for instance.
   */
  com.google.protobuf.ByteString
      getInstanceBytes();

  /**
   * <pre>
   * Processor name.
   * </pre>
   *
   * <code>optional string processor = 2;</code>
   * @return Whether the processor field is set.
   */
  boolean hasProcessor();
  /**
   * <pre>
   * Processor name.
   * </pre>
   *
   * <code>optional string processor = 2;</code>
   * @return The processor.
   */
  java.lang.String getProcessor();
  /**
   * <pre>
   * Processor name.
   * </pre>
   *
   * <code>optional string processor = 2;</code>
   * @return The bytes for processor.
   */
  com.google.protobuf.ByteString
      getProcessorBytes();

  /**
   * <pre>
   * Parameter identifiers. Each identifier takes the form of
   * a namespace and a name.
   * For Yamcs-native naming only the name field is required and
   * should be the fully qualified name. The namespace is only
   * required when the name represents an alias of that parameter.
   * </pre>
   *
   * <code>repeated .yamcs.protobuf.NamedObjectId id = 3;</code>
   */
  java.util.List<org.yamcs.protobuf.Yamcs.NamedObjectId> 
      getIdList();
  /**
   * <pre>
   * Parameter identifiers. Each identifier takes the form of
   * a namespace and a name.
   * For Yamcs-native naming only the name field is required and
   * should be the fully qualified name. The namespace is only
   * required when the name represents an alias of that parameter.
   * </pre>
   *
   * <code>repeated .yamcs.protobuf.NamedObjectId id = 3;</code>
   */
  org.yamcs.protobuf.Yamcs.NamedObjectId getId(int index);
  /**
   * <pre>
   * Parameter identifiers. Each identifier takes the form of
   * a namespace and a name.
   * For Yamcs-native naming only the name field is required and
   * should be the fully qualified name. The namespace is only
   * required when the name represents an alias of that parameter.
   * </pre>
   *
   * <code>repeated .yamcs.protobuf.NamedObjectId id = 3;</code>
   */
  int getIdCount();
  /**
   * <pre>
   * Parameter identifiers. Each identifier takes the form of
   * a namespace and a name.
   * For Yamcs-native naming only the name field is required and
   * should be the fully qualified name. The namespace is only
   * required when the name represents an alias of that parameter.
   * </pre>
   *
   * <code>repeated .yamcs.protobuf.NamedObjectId id = 3;</code>
   */
  java.util.List<? extends org.yamcs.protobuf.Yamcs.NamedObjectIdOrBuilder> 
      getIdOrBuilderList();
  /**
   * <pre>
   * Parameter identifiers. Each identifier takes the form of
   * a namespace and a name.
   * For Yamcs-native naming only the name field is required and
   * should be the fully qualified name. The namespace is only
   * required when the name represents an alias of that parameter.
   * </pre>
   *
   * <code>repeated .yamcs.protobuf.NamedObjectId id = 3;</code>
   */
  org.yamcs.protobuf.Yamcs.NamedObjectIdOrBuilder getIdOrBuilder(
      int index);

  /**
   * <pre>
   * Send an error message if any parameter is invalid.
   * Default: true
   * </pre>
   *
   * <code>optional bool abortOnInvalid = 4;</code>
   * @return Whether the abortOnInvalid field is set.
   */
  boolean hasAbortOnInvalid();
  /**
   * <pre>
   * Send an error message if any parameter is invalid.
   * Default: true
   * </pre>
   *
   * <code>optional bool abortOnInvalid = 4;</code>
   * @return The abortOnInvalid.
   */
  boolean getAbortOnInvalid();

  /**
   * <pre>
   * Send parameter updates when parameters expire.
   * The update will have the same value and timestamp like
   * the preceding update, but with acquisition status set to
   * EXPIRED (instead of ACQUIRED)
   * Default: false
   * </pre>
   *
   * <code>optional bool updateOnExpiration = 5;</code>
   * @return Whether the updateOnExpiration field is set.
   */
  boolean hasUpdateOnExpiration();
  /**
   * <pre>
   * Send parameter updates when parameters expire.
   * The update will have the same value and timestamp like
   * the preceding update, but with acquisition status set to
   * EXPIRED (instead of ACQUIRED)
   * Default: false
   * </pre>
   *
   * <code>optional bool updateOnExpiration = 5;</code>
   * @return The updateOnExpiration.
   */
  boolean getUpdateOnExpiration();

  /**
   * <pre>
   * If available, send immediately the last cached value
   * of each subscribed parameter.
   * Default: true
   * </pre>
   *
   * <code>optional bool sendFromCache = 6;</code>
   * @return Whether the sendFromCache field is set.
   */
  boolean hasSendFromCache();
  /**
   * <pre>
   * If available, send immediately the last cached value
   * of each subscribed parameter.
   * Default: true
   * </pre>
   *
   * <code>optional bool sendFromCache = 6;</code>
   * @return The sendFromCache.
   */
  boolean getSendFromCache();

  /**
   * <pre>
   * How to interpret the submitted parameter ids. Default
   * is to replace an existing subscription with the newly
   * submitted list.
   * </pre>
   *
   * <code>optional .yamcs.protobuf.processing.SubscribeParametersRequest.Action action = 7;</code>
   * @return Whether the action field is set.
   */
  boolean hasAction();
  /**
   * <pre>
   * How to interpret the submitted parameter ids. Default
   * is to replace an existing subscription with the newly
   * submitted list.
   * </pre>
   *
   * <code>optional .yamcs.protobuf.processing.SubscribeParametersRequest.Action action = 7;</code>
   * @return The action.
   */
  org.yamcs.protobuf.SubscribeParametersRequest.Action getAction();

  /**
   * <pre>
   * If set, truncate binary values to the specified byte length.
   * This may be necessary when Yamcs contains large binary values.
   * A negative value implies no truncating, which is the default.
   * </pre>
   *
   * <code>optional int32 maxBytes = 8;</code>
   * @return Whether the maxBytes field is set.
   */
  boolean hasMaxBytes();
  /**
   * <pre>
   * If set, truncate binary values to the specified byte length.
   * This may be necessary when Yamcs contains large binary values.
   * A negative value implies no truncating, which is the default.
   * </pre>
   *
   * <code>optional int32 maxBytes = 8;</code>
   * @return The maxBytes.
   */
  int getMaxBytes();
}
