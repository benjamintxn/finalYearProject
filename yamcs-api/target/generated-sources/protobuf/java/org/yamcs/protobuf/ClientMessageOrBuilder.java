// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yamcs/api/websocket.proto

package org.yamcs.protobuf;

public interface ClientMessageOrBuilder extends
    // @@protoc_insertion_point(interface_extends:yamcs.api.ClientMessage)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Message type. Typically the name of a topic to subscribe to, or a built-in like "cancel".
   * </pre>
   *
   * <code>string type = 1;</code>
   * @return The type.
   */
  java.lang.String getType();
  /**
   * <pre>
   * Message type. Typically the name of a topic to subscribe to, or a built-in like "cancel".
   * </pre>
   *
   * <code>string type = 1;</code>
   * @return The bytes for type.
   */
  com.google.protobuf.ByteString
      getTypeBytes();

  /**
   * <pre>
   * Options specific to the type
   * </pre>
   *
   * <code>.google.protobuf.Any options = 2;</code>
   * @return Whether the options field is set.
   */
  boolean hasOptions();
  /**
   * <pre>
   * Options specific to the type
   * </pre>
   *
   * <code>.google.protobuf.Any options = 2;</code>
   * @return The options.
   */
  com.google.protobuf.Any getOptions();
  /**
   * <pre>
   * Options specific to the type
   * </pre>
   *
   * <code>.google.protobuf.Any options = 2;</code>
   */
  com.google.protobuf.AnyOrBuilder getOptionsOrBuilder();

  /**
   * <pre>
   * Optional client-side message identifier, returned in reply messages.
   * </pre>
   *
   * <code>int32 id = 3;</code>
   * @return The id.
   */
  int getId();

  /**
   * <pre>
   * If applicable, the call associated with this message
   * This should be used when the client is streaming multiple messages
   * handled by the same call.
   * </pre>
   *
   * <code>int32 call = 4;</code>
   * @return The call.
   */
  int getCall();

  /**
   * <pre>
   * If set, permit the server to keep a WebSocket connection despite frame writes
   * getting dropped (channel not open or not writable). If unset the default is 0,
   * meaning that if the server can't write a frame, it will close the connection
   * (impacting all calls on that connection).
   * This attribute is only applied when it is set on the first message of a call.
   * Since Yamcs 5.7.6 this option is deprecated in favour of lowPriority below.
   * </pre>
   *
   * <code>int32 maxDroppedWrites = 5 [deprecated = true];</code>
   * @deprecated
   * @return The maxDroppedWrites.
   */
  @java.lang.Deprecated int getMaxDroppedWrites();

  /**
   * <pre>
   *If set to true, permit the server to drop messages if writing the message would cause the
   * channel to exceed the highWaterMark
   * (see https://docs.yamcs.org/yamcs-server-manual/services/global/http-server/)
   * This attribute is only applied when it is set on the first message of a call.
   * Note that if a message exceeds the highWaterMark, with this option set it will always be dropped.
   * A warning will be printed in the Yamcs logs in this case.
   * </pre>
   *
   * <code>bool lowPriority = 6;</code>
   * @return The lowPriority.
   */
  boolean getLowPriority();
}
