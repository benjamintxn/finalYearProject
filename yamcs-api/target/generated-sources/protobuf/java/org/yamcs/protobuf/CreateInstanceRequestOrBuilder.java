// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yamcs/protobuf/instances/instances_service.proto

package org.yamcs.protobuf;

public interface CreateInstanceRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:yamcs.protobuf.instances.CreateInstanceRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * **Required.** The name of the instance.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   * @return Whether the name field is set.
   */
  boolean hasName();
  /**
   * <pre>
   * **Required.** The name of the instance.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * **Required.** The name of the instance.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * **Required.** The name of the template for this instance.
   * </pre>
   *
   * <code>optional string template = 2;</code>
   * @return Whether the template field is set.
   */
  boolean hasTemplate();
  /**
   * <pre>
   * **Required.** The name of the template for this instance.
   * </pre>
   *
   * <code>optional string template = 2;</code>
   * @return The template.
   */
  java.lang.String getTemplate();
  /**
   * <pre>
   * **Required.** The name of the template for this instance.
   * </pre>
   *
   * <code>optional string template = 2;</code>
   * @return The bytes for template.
   */
  com.google.protobuf.ByteString
      getTemplateBytes();

  /**
   * <pre>
   * Arguments for substitution in the template definition. Each entry is
   * keyed by the argument name. The value must be a string.
   * </pre>
   *
   * <code>map&lt;string, string&gt; templateArgs = 3;</code>
   */
  int getTemplateArgsCount();
  /**
   * <pre>
   * Arguments for substitution in the template definition. Each entry is
   * keyed by the argument name. The value must be a string.
   * </pre>
   *
   * <code>map&lt;string, string&gt; templateArgs = 3;</code>
   */
  boolean containsTemplateArgs(
      java.lang.String key);
  /**
   * Use {@link #getTemplateArgsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getTemplateArgs();
  /**
   * <pre>
   * Arguments for substitution in the template definition. Each entry is
   * keyed by the argument name. The value must be a string.
   * </pre>
   *
   * <code>map&lt;string, string&gt; templateArgs = 3;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getTemplateArgsMap();
  /**
   * <pre>
   * Arguments for substitution in the template definition. Each entry is
   * keyed by the argument name. The value must be a string.
   * </pre>
   *
   * <code>map&lt;string, string&gt; templateArgs = 3;</code>
   */

  java.lang.String getTemplateArgsOrDefault(
      java.lang.String key,
      java.lang.String defaultValue);
  /**
   * <pre>
   * Arguments for substitution in the template definition. Each entry is
   * keyed by the argument name. The value must be a string.
   * </pre>
   *
   * <code>map&lt;string, string&gt; templateArgs = 3;</code>
   */

  java.lang.String getTemplateArgsOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Labels assigned to this instance. Each entry is keyed by the tag name
   * of the label. The value represent the label value for that tag.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 4;</code>
   */
  int getLabelsCount();
  /**
   * <pre>
   * Labels assigned to this instance. Each entry is keyed by the tag name
   * of the label. The value represent the label value for that tag.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 4;</code>
   */
  boolean containsLabels(
      java.lang.String key);
  /**
   * Use {@link #getLabelsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getLabels();
  /**
   * <pre>
   * Labels assigned to this instance. Each entry is keyed by the tag name
   * of the label. The value represent the label value for that tag.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 4;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getLabelsMap();
  /**
   * <pre>
   * Labels assigned to this instance. Each entry is keyed by the tag name
   * of the label. The value represent the label value for that tag.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 4;</code>
   */

  java.lang.String getLabelsOrDefault(
      java.lang.String key,
      java.lang.String defaultValue);
  /**
   * <pre>
   * Labels assigned to this instance. Each entry is keyed by the tag name
   * of the label. The value represent the label value for that tag.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 4;</code>
   */

  java.lang.String getLabelsOrThrow(
      java.lang.String key);
}
