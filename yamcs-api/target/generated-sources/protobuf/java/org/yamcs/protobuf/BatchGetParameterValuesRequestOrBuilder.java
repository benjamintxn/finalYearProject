// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yamcs/protobuf/processing/processing.proto

package org.yamcs.protobuf;

public interface BatchGetParameterValuesRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:yamcs.protobuf.processing.BatchGetParameterValuesRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Yamcs instance name.
   * </pre>
   *
   * <code>optional string instance = 4;</code>
   * @return Whether the instance field is set.
   */
  boolean hasInstance();
  /**
   * <pre>
   * Yamcs instance name.
   * </pre>
   *
   * <code>optional string instance = 4;</code>
   * @return The instance.
   */
  java.lang.String getInstance();
  /**
   * <pre>
   * Yamcs instance name.
   * </pre>
   *
   * <code>optional string instance = 4;</code>
   * @return The bytes for instance.
   */
  com.google.protobuf.ByteString
      getInstanceBytes();

  /**
   * <pre>
   * Processor name.
   * </pre>
   *
   * <code>optional string processor = 5;</code>
   * @return Whether the processor field is set.
   */
  boolean hasProcessor();
  /**
   * <pre>
   * Processor name.
   * </pre>
   *
   * <code>optional string processor = 5;</code>
   * @return The processor.
   */
  java.lang.String getProcessor();
  /**
   * <pre>
   * Processor name.
   * </pre>
   *
   * <code>optional string processor = 5;</code>
   * @return The bytes for processor.
   */
  com.google.protobuf.ByteString
      getProcessorBytes();

  /**
   * <pre>
   * Parameter identifiers. Each identifier takes the form of
   * a namespace and a name.
   * For Yamcs-native naming only the name field is required and
   * should be the fully qualified name. The namespace is only
   * required when the name represents an alias of that parameter.
   * </pre>
   *
   * <code>repeated .yamcs.protobuf.NamedObjectId id = 1;</code>
   */
  java.util.List<org.yamcs.protobuf.Yamcs.NamedObjectId> 
      getIdList();
  /**
   * <pre>
   * Parameter identifiers. Each identifier takes the form of
   * a namespace and a name.
   * For Yamcs-native naming only the name field is required and
   * should be the fully qualified name. The namespace is only
   * required when the name represents an alias of that parameter.
   * </pre>
   *
   * <code>repeated .yamcs.protobuf.NamedObjectId id = 1;</code>
   */
  org.yamcs.protobuf.Yamcs.NamedObjectId getId(int index);
  /**
   * <pre>
   * Parameter identifiers. Each identifier takes the form of
   * a namespace and a name.
   * For Yamcs-native naming only the name field is required and
   * should be the fully qualified name. The namespace is only
   * required when the name represents an alias of that parameter.
   * </pre>
   *
   * <code>repeated .yamcs.protobuf.NamedObjectId id = 1;</code>
   */
  int getIdCount();
  /**
   * <pre>
   * Parameter identifiers. Each identifier takes the form of
   * a namespace and a name.
   * For Yamcs-native naming only the name field is required and
   * should be the fully qualified name. The namespace is only
   * required when the name represents an alias of that parameter.
   * </pre>
   *
   * <code>repeated .yamcs.protobuf.NamedObjectId id = 1;</code>
   */
  java.util.List<? extends org.yamcs.protobuf.Yamcs.NamedObjectIdOrBuilder> 
      getIdOrBuilderList();
  /**
   * <pre>
   * Parameter identifiers. Each identifier takes the form of
   * a namespace and a name.
   * For Yamcs-native naming only the name field is required and
   * should be the fully qualified name. The namespace is only
   * required when the name represents an alias of that parameter.
   * </pre>
   *
   * <code>repeated .yamcs.protobuf.NamedObjectId id = 1;</code>
   */
  org.yamcs.protobuf.Yamcs.NamedObjectIdOrBuilder getIdOrBuilder(
      int index);

  /**
   * <code>optional bool fromCache = 2;</code>
   * @return Whether the fromCache field is set.
   */
  boolean hasFromCache();
  /**
   * <code>optional bool fromCache = 2;</code>
   * @return The fromCache.
   */
  boolean getFromCache();

  /**
   * <pre>
   * If not fromCache, wait this time (in milliseconds) to receive the parameter
   * </pre>
   *
   * <code>optional uint64 timeout = 3;</code>
   * @return Whether the timeout field is set.
   */
  boolean hasTimeout();
  /**
   * <pre>
   * If not fromCache, wait this time (in milliseconds) to receive the parameter
   * </pre>
   *
   * <code>optional uint64 timeout = 3;</code>
   * @return The timeout.
   */
  long getTimeout();
}
