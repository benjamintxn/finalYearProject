// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yamcs/protobuf/cop1/cop1.proto

package org.yamcs.protobuf;

public interface Cop1StatusOrBuilder extends
    // @@protoc_insertion_point(interface_extends:yamcs.protobuf.cop1.Cop1Status)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Link name for which this status applies. 
   * It is present when this message is sent over the websocket as there might
   * be multiple COP-1 links subscribed
   * </pre>
   *
   * <code>optional string link = 11;</code>
   * @return Whether the link field is set.
   */
  boolean hasLink();
  /**
   * <pre>
   * Link name for which this status applies. 
   * It is present when this message is sent over the websocket as there might
   * be multiple COP-1 links subscribed
   * </pre>
   *
   * <code>optional string link = 11;</code>
   * @return The link.
   */
  java.lang.String getLink();
  /**
   * <pre>
   * Link name for which this status applies. 
   * It is present when this message is sent over the websocket as there might
   * be multiple COP-1 links subscribed
   * </pre>
   *
   * <code>optional string link = 11;</code>
   * @return The bytes for link.
   */
  com.google.protobuf.ByteString
      getLinkBytes();

  /**
   * <pre>
   * If false, all frames are immediately transmitted (i.e. COP-1 is disabled)
   * </pre>
   *
   * <code>optional bool cop1Active = 1;</code>
   * @return Whether the cop1Active field is set.
   */
  boolean hasCop1Active();
  /**
   * <pre>
   * If false, all frames are immediately transmitted (i.e. COP-1 is disabled)
   * </pre>
   *
   * <code>optional bool cop1Active = 1;</code>
   * @return The cop1Active.
   */
  boolean getCop1Active();

  /**
   * <pre>
   * Relevant if cop1Active = false -&gt; set the bypass flag on all outgoing frames 
   * </pre>
   *
   * <code>optional bool setBypassAll = 2;</code>
   * @return Whether the setBypassAll field is set.
   */
  boolean hasSetBypassAll();
  /**
   * <pre>
   * Relevant if cop1Active = false -&gt; set the bypass flag on all outgoing frames 
   * </pre>
   *
   * <code>optional bool setBypassAll = 2;</code>
   * @return The setBypassAll.
   */
  boolean getSetBypassAll();

  /**
   * <pre>
   * Last received CLCW
   * </pre>
   *
   * <code>optional .yamcs.protobuf.cop1.Clcw clcw = 3;</code>
   * @return Whether the clcw field is set.
   */
  boolean hasClcw();
  /**
   * <pre>
   * Last received CLCW
   * </pre>
   *
   * <code>optional .yamcs.protobuf.cop1.Clcw clcw = 3;</code>
   * @return The clcw.
   */
  org.yamcs.protobuf.Clcw getClcw();
  /**
   * <pre>
   * Last received CLCW
   * </pre>
   *
   * <code>optional .yamcs.protobuf.cop1.Clcw clcw = 3;</code>
   */
  org.yamcs.protobuf.ClcwOrBuilder getClcwOrBuilder();

  /**
   * <pre>
   * Current state of FOP-1 state machine, only relevant if cop1Active = true
   * </pre>
   *
   * <code>optional .yamcs.protobuf.cop1.Cop1State state = 4;</code>
   * @return Whether the state field is set.
   */
  boolean hasState();
  /**
   * <pre>
   * Current state of FOP-1 state machine, only relevant if cop1Active = true
   * </pre>
   *
   * <code>optional .yamcs.protobuf.cop1.Cop1State state = 4;</code>
   * @return The state.
   */
  org.yamcs.protobuf.Cop1State getState();

  /**
   * <pre>
   * V(S) - Transmitter Frame Sequence Number;
   * </pre>
   *
   * <code>optional uint32 vS = 5;</code>
   * @return Whether the vS field is set.
   */
  boolean hasVS();
  /**
   * <pre>
   * V(S) - Transmitter Frame Sequence Number;
   * </pre>
   *
   * <code>optional uint32 vS = 5;</code>
   * @return The vS.
   */
  int getVS();

  /**
   * <pre>
   * The nR from the previous CLCW
   * </pre>
   *
   * <code>optional uint32 nnR = 6;</code>
   * @return Whether the nnR field is set.
   */
  boolean hasNnR();
  /**
   * <pre>
   * The nR from the previous CLCW
   * </pre>
   *
   * <code>optional uint32 nnR = 6;</code>
   * @return The nnR.
   */
  int getNnR();

  /**
   * <pre>
   * Number of TC packets in the wait queue
   * </pre>
   *
   * <code>optional uint32 waitQueueNumTC = 7;</code>
   * @return Whether the waitQueueNumTC field is set.
   */
  boolean hasWaitQueueNumTC();
  /**
   * <pre>
   * Number of TC packets in the wait queue
   * </pre>
   *
   * <code>optional uint32 waitQueueNumTC = 7;</code>
   * @return The waitQueueNumTC.
   */
  int getWaitQueueNumTC();

  /**
   * <pre>
   * Number of unacknowledged frames in the sent queue
   * </pre>
   *
   * <code>optional uint32 sentQueueNumFrames = 8;</code>
   * @return Whether the sentQueueNumFrames field is set.
   */
  boolean hasSentQueueNumFrames();
  /**
   * <pre>
   * Number of unacknowledged frames in the sent queue
   * </pre>
   *
   * <code>optional uint32 sentQueueNumFrames = 8;</code>
   * @return The sentQueueNumFrames.
   */
  int getSentQueueNumFrames();

  /**
   * <pre>
   * Number of frames in the out queue (waiting to be picked up by the master chain
   * multiplexer)
   * </pre>
   *
   * <code>optional uint32 outQueueNumFrames = 9;</code>
   * @return Whether the outQueueNumFrames field is set.
   */
  boolean hasOutQueueNumFrames();
  /**
   * <pre>
   * Number of frames in the out queue (waiting to be picked up by the master chain
   * multiplexer)
   * </pre>
   *
   * <code>optional uint32 outQueueNumFrames = 9;</code>
   * @return The outQueueNumFrames.
   */
  int getOutQueueNumFrames();

  /**
   * <pre>
   * How many times the last frame has been transmitted
   * </pre>
   *
   * <code>optional uint32 txCount = 10;</code>
   * @return Whether the txCount field is set.
   */
  boolean hasTxCount();
  /**
   * <pre>
   * How many times the last frame has been transmitted
   * </pre>
   *
   * <code>optional uint32 txCount = 10;</code>
   * @return The txCount.
   */
  int getTxCount();
}
