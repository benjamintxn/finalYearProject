// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yamcs/protobuf/buckets/buckets.proto

package org.yamcs.protobuf;

public interface ListObjectsRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:yamcs.protobuf.buckets.ListObjectsRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Yamcs instance name. Or _global.
   * </pre>
   *
   * <code>optional string instance = 1;</code>
   * @return Whether the instance field is set.
   */
  boolean hasInstance();
  /**
   * <pre>
   * Yamcs instance name. Or _global.
   * </pre>
   *
   * <code>optional string instance = 1;</code>
   * @return The instance.
   */
  java.lang.String getInstance();
  /**
   * <pre>
   * Yamcs instance name. Or _global.
   * </pre>
   *
   * <code>optional string instance = 1;</code>
   * @return The bytes for instance.
   */
  com.google.protobuf.ByteString
      getInstanceBytes();

  /**
   * <pre>
   * Bucket name.
   * </pre>
   *
   * <code>optional string bucketName = 2;</code>
   * @return Whether the bucketName field is set.
   */
  boolean hasBucketName();
  /**
   * <pre>
   * Bucket name.
   * </pre>
   *
   * <code>optional string bucketName = 2;</code>
   * @return The bucketName.
   */
  java.lang.String getBucketName();
  /**
   * <pre>
   * Bucket name.
   * </pre>
   *
   * <code>optional string bucketName = 2;</code>
   * @return The bytes for bucketName.
   */
  com.google.protobuf.ByteString
      getBucketNameBytes();

  /**
   * <pre>
   * Return only objects whose name do not contain the delimiter after the
   * prefix. For the other objects, the response contains (in the prefix
   * response parameter) the name truncated after the delimiter. Duplicates
   * are omitted.
   * Together with ``prefix`` this parameter provides filtering capabilities.
   * These work similar to Google Cloud Storage and Amazon S3.
   * The ``delimiter`` allows the list to work in a directory mode despite
   * the object namespace being flat. For example if the delimiter is set to
   * "/", then listing the bucket containing objects "a/b", "a/c", "d", "e"
   * and "e/f" returns objects "d" and "e" and prefixes "a/" and "e/".
   * </pre>
   *
   * <code>optional string delimiter = 3;</code>
   * @return Whether the delimiter field is set.
   */
  boolean hasDelimiter();
  /**
   * <pre>
   * Return only objects whose name do not contain the delimiter after the
   * prefix. For the other objects, the response contains (in the prefix
   * response parameter) the name truncated after the delimiter. Duplicates
   * are omitted.
   * Together with ``prefix`` this parameter provides filtering capabilities.
   * These work similar to Google Cloud Storage and Amazon S3.
   * The ``delimiter`` allows the list to work in a directory mode despite
   * the object namespace being flat. For example if the delimiter is set to
   * "/", then listing the bucket containing objects "a/b", "a/c", "d", "e"
   * and "e/f" returns objects "d" and "e" and prefixes "a/" and "e/".
   * </pre>
   *
   * <code>optional string delimiter = 3;</code>
   * @return The delimiter.
   */
  java.lang.String getDelimiter();
  /**
   * <pre>
   * Return only objects whose name do not contain the delimiter after the
   * prefix. For the other objects, the response contains (in the prefix
   * response parameter) the name truncated after the delimiter. Duplicates
   * are omitted.
   * Together with ``prefix`` this parameter provides filtering capabilities.
   * These work similar to Google Cloud Storage and Amazon S3.
   * The ``delimiter`` allows the list to work in a directory mode despite
   * the object namespace being flat. For example if the delimiter is set to
   * "/", then listing the bucket containing objects "a/b", "a/c", "d", "e"
   * and "e/f" returns objects "d" and "e" and prefixes "a/" and "e/".
   * </pre>
   *
   * <code>optional string delimiter = 3;</code>
   * @return The bytes for delimiter.
   */
  com.google.protobuf.ByteString
      getDelimiterBytes();

  /**
   * <pre>
   * List only objects whose name start with prefix
   * </pre>
   *
   * <code>optional string prefix = 4;</code>
   * @return Whether the prefix field is set.
   */
  boolean hasPrefix();
  /**
   * <pre>
   * List only objects whose name start with prefix
   * </pre>
   *
   * <code>optional string prefix = 4;</code>
   * @return The prefix.
   */
  java.lang.String getPrefix();
  /**
   * <pre>
   * List only objects whose name start with prefix
   * </pre>
   *
   * <code>optional string prefix = 4;</code>
   * @return The bytes for prefix.
   */
  com.google.protobuf.ByteString
      getPrefixBytes();
}
