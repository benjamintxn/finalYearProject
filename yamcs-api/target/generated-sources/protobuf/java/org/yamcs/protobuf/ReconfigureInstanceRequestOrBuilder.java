// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yamcs/protobuf/instances/instances_service.proto

package org.yamcs.protobuf;

public interface ReconfigureInstanceRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:yamcs.protobuf.instances.ReconfigureInstanceRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Yamcs instance name.
   * </pre>
   *
   * <code>optional string instance = 1;</code>
   * @return Whether the instance field is set.
   */
  boolean hasInstance();
  /**
   * <pre>
   * Yamcs instance name.
   * </pre>
   *
   * <code>optional string instance = 1;</code>
   * @return The instance.
   */
  java.lang.String getInstance();
  /**
   * <pre>
   * Yamcs instance name.
   * </pre>
   *
   * <code>optional string instance = 1;</code>
   * @return The bytes for instance.
   */
  com.google.protobuf.ByteString
      getInstanceBytes();

  /**
   * <pre>
   * Arguments for substitution in the template definition. Each entry is
   * keyed by the argument name. The value must be a string.
   * </pre>
   *
   * <code>map&lt;string, string&gt; templateArgs = 2;</code>
   */
  int getTemplateArgsCount();
  /**
   * <pre>
   * Arguments for substitution in the template definition. Each entry is
   * keyed by the argument name. The value must be a string.
   * </pre>
   *
   * <code>map&lt;string, string&gt; templateArgs = 2;</code>
   */
  boolean containsTemplateArgs(
      java.lang.String key);
  /**
   * Use {@link #getTemplateArgsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getTemplateArgs();
  /**
   * <pre>
   * Arguments for substitution in the template definition. Each entry is
   * keyed by the argument name. The value must be a string.
   * </pre>
   *
   * <code>map&lt;string, string&gt; templateArgs = 2;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getTemplateArgsMap();
  /**
   * <pre>
   * Arguments for substitution in the template definition. Each entry is
   * keyed by the argument name. The value must be a string.
   * </pre>
   *
   * <code>map&lt;string, string&gt; templateArgs = 2;</code>
   */

  java.lang.String getTemplateArgsOrDefault(
      java.lang.String key,
      java.lang.String defaultValue);
  /**
   * <pre>
   * Arguments for substitution in the template definition. Each entry is
   * keyed by the argument name. The value must be a string.
   * </pre>
   *
   * <code>map&lt;string, string&gt; templateArgs = 2;</code>
   */

  java.lang.String getTemplateArgsOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Labels assigned to this instance. Each entry is keyed by the tag name
   * of the label. The value represent the label value for that tag.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 3;</code>
   */
  int getLabelsCount();
  /**
   * <pre>
   * Labels assigned to this instance. Each entry is keyed by the tag name
   * of the label. The value represent the label value for that tag.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 3;</code>
   */
  boolean containsLabels(
      java.lang.String key);
  /**
   * Use {@link #getLabelsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getLabels();
  /**
   * <pre>
   * Labels assigned to this instance. Each entry is keyed by the tag name
   * of the label. The value represent the label value for that tag.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 3;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getLabelsMap();
  /**
   * <pre>
   * Labels assigned to this instance. Each entry is keyed by the tag name
   * of the label. The value represent the label value for that tag.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 3;</code>
   */

  java.lang.String getLabelsOrDefault(
      java.lang.String key,
      java.lang.String defaultValue);
  /**
   * <pre>
   * Labels assigned to this instance. Each entry is keyed by the tag name
   * of the label. The value represent the label value for that tag.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 3;</code>
   */

  java.lang.String getLabelsOrThrow(
      java.lang.String key);
}
